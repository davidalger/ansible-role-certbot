---
- name: install certbot
  git:
    repo: "{{ certbot_repo }}"
    dest: "{{ certbot_dir }}"
    version: "{{ certbot_version }}"
    update: "{{ certbot_keep_updated }}"

- name: make certbot-auto executable
  file:
    path: "{{ certbot_dir }}/certbot-auto"
    mode: 0755

- name: create certbot webroot
  file: path={{ certbot_webroot_path }} state=directory

- name: create certbot log-directory
  file:
    path: "{{ certbot_logdir }}"
    owner: root
    group: root
    mode: 0700
    state: directory

- name: create /etc/nginx/default.d
  file: path=/etc/nginx/default.d state=directory

- name: configure certbot nginx webroot
  template:
    src: nginx.conf
    dest: /etc/nginx/default.d/certbot.conf
    owner: root
    group: root
  notify: reload nginx
  register: configure_result

- name: reload nginx service
  service: name=nginx state=reloaded
  when: configure_result|changed

- name: configure certbot auto-renew cron
  tags: crontab
  cron:
    name: certbot_renew
    job: "{{ certbot_dir }}/certbot-auto renew >> {{ certbot_logdir }}/certbot-renew.log"
    user: root
    minute: 30
    hour: 2
    weekday: 1

- name: configure certbot auto-renew nginx reload
  tags: crontab
  cron:
    name: certbot_renew_reload_nginx
    job: "{{ certbot_nginx_bin }} -s reload"
    user: root
    minute: 35
    hour: 2
    weekday: 1

- name: install certbot dependencies
  command: "{{ certbot_dir }}/certbot-auto --noninteractive --os-packages-only"
  register: install_result
  when: certbot_domains and certbot_email and certbot_generate
  changed_when: install_result.stdout != 'OS packages installed.'

- name: generate certificate files
  command: >
    {{ certbot_dir }}/certbot-auto certonly
    --agree-tos
    --noninteractive
    --webroot
    --webroot-path {{ certbot_webroot_path }}
    --text
    --rsa-key-size {{ certbot_rsa_key_size }}
    --email {{ certbot_email|quote }}
    -d {{ item }}
    {{ item.startswith('www.') | ternary(item.replace("www.", "-d "),'') }}

  args:
    creates: /etc/letsencrypt/live/{{ item }}/fullchain.pem
  with_items: "{{ certbot_domains }}"
  when: certbot_domains and certbot_email and certbot_generate

- name: symlink certificate files into /etc/nginx/ssl
  file:
    src: /etc/letsencrypt/live/{{ item[0] }}/{{ item[1] }}
    dest: /etc/nginx/ssl/{{ item[0] }}.{{ item[2] }}
    state: link
    force: true    # overwrite any self-signed certificates previously created for purpose of nginx start
  with_nested:
    - "{{ certbot_domains }}"
    - [[fullchain.pem, crt], [privkey.pem, key]]
  when: certbot_domains and certbot_email and certbot_generate
  notify: reload nginx
